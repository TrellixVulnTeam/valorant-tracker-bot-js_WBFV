const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');
const User = require('../../models/User');
require('dotenv').config();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('reg')
        .setDescription('–ü—Ä–∏–≤\'—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç—É Discord –¥–æ –∞–∫–∫–∞—É–Ω—Ç—É Valorant')
        .addStringOption(option =>
            option.setName('name')
                .setDescription('–ù—ñ–∫ Valorant')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('tag')
                .setDescription('–¢–µ–≥ Valorant')
                .setRequired(true)),

    async execute(interaction, client) {
        const message = await interaction.deferReply({
            fetchReply: true,
            ephemeral: true
        });

        const name = interaction.options.getString('name');
        const tag = interaction.options.getString('tag');
        const discord_id = interaction.user.id;

        const user = await User.findOne({ where: { discord_id: discord_id } });
            
        if (!(user === null)) {
            embed = new EmbedBuilder()
                .setTitle(`–í–∏ —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ üö´`)
                .setDescription(`–Ø–∫—â–æ —Ü–µ –Ω–µ —Ç–∞–∫ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é`)
                .setColor('#f80c0c')
                .setThumbnail(client.user.displayAvatarURL())
                .setTimestamp(Date.now());

            await interaction.editReply({
                embeds: [embed],
            });
            return;
        }      
        
        try {
            const res = await axios.get(`https://api.henrikdev.xyz/valorant/v1/account/${name}/${tag}`, {
                headers: {
                    'Authorization': `${process.env.api_key}`
                }
            });
            
            const account_level = res.data.data.account_level;
            const puuid = res.data.data.puuid;
            const region = res.data.data.region;
            const small_card_url = res.data.data.card.small;
            const large_card_url = res.data.data.card.large;
            const wide_card_url = res.data.data.card.wide;
   
            try {
                const res = await axios.get(`https://api.henrikdev.xyz/valorant/v1/by-puuid/mmr/${region}/${puuid}`, {
                headers: {
                    'Authorization': `${process.env.api_key}`
                }
            });

            const elo = res.data.data.elo;
            const current_tier_patched = res.data.data.currenttierpatched;

            await User.create({
                discord_id: discord_id,
                valorant_name: name,
                valorant_tag: tag,
                puuid: puuid,
                elo: elo,
                current_tier_patched: current_tier_patched,
                region: region,
                account_level: account_level,
                small_card_url: small_card_url,
                large_card_url: large_card_url,
                wide_card_url: wide_card_url
            });

            embed = new EmbedBuilder()
                .setTitle(`–ü—Ä–∏–≤'—è–∑–∫–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ ‚úÖ`)
                .setDescription(`–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –∫–æ–º–∞–Ω–¥–æ—é /stats`)
                .setColor('#2d912c')
                .setThumbnail(client.user.displayAvatarURL())
                .setTimestamp(Date.now());

            await interaction.editReply({
                embeds: [embed],
            });

            } catch (error) {
                console.error(error);
                embed = new EmbedBuilder()
                    .setTitle(`–£–ø—Å—Å—Å, —è –ø–æ–ª–∞–º–∞–≤—Å—è üò≠`)
                    .setDescription(`–ó–≤\'—è–∂–∏—Å—å –∑ –∞–¥–º—ñ–Ω–æ–º, –Ω–µ—Ö–∞–π –≥–ª—è–Ω–µ —â–æ —Ç–∞–º —Å—Ç–∞–ª–æ—Å—å`)
                    .setColor('#f80c0c')
                    .setThumbnail(client.user.displayAvatarURL())
                    .setTimestamp(Date.now());

                await interaction.editReply({
                    embeds: [embed],
                });
            }
        } catch (error) {
            const err = error.response.data.status;
            let title, description;
            switch (err) {
                case 404:
                    title = '–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–æ –Ω—ñ–∫ –∞–±–æ —Ç–µ–≥ üß¨';
                    description = '–ü–µ—Ä–µ–≤—ñ—Ä –±—É–¥—å –ª–∞—Å–∫–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω—ñ –¥–∞–Ω—ñ, –∑–Ω–∞–∫—É \'#\' **–ù–ï** –ø–æ—Ç—Ä—ñ–±–Ω–æ';
                    break;
                case 400:
                    title = '–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–æ –Ω—ñ–∫ –∞–±–æ —Ç–µ–≥ üß¨';
                    description = '–ü–µ—Ä–µ–≤—ñ—Ä –±—É–¥—å –ª–∞—Å–∫–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω—ñ –¥–∞–Ω—ñ, –∑–Ω–∞–∫—É \'#\' **–ù–ï** –ø–æ—Ç—Ä—ñ–±–Ω–æ\n';
                    break;
                case 500:
                    title = '–û–π, –∞ —Å—Ö–æ–∂–µ —â–æ —Å–µ—Ä–≤–µ—Ä—É –∑–∞—Ä–∞–∑ –ø–æ–≥–∞–Ω–æ ü•≤';
                    description = '–¢—É—Ç –º–∏ –±–µ–∑—Å–∏–ª—ñ, —á–µ–∫–∞—î–º–æ fix';
                    break;
                case 429:
                    title = '–õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ üò•';
                    description = '–°–ø—Ä–æ–±—É–π –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É';
                    break;
                default:
                    title = '–£–ø—Å—Å—Å, —è –ø–æ–ª–∞–º–∞–≤—Å—è üò≠';
                    description = '–ó–≤\'—è–∂–∏—Å—å –∑ –∞–¥–º—ñ–Ω–æ–º, –Ω–µ—Ö–∞–π –≥–ª—è–Ω–µ —â–æ —Ç–∞–º —Å—Ç–∞–ª–æ—Å—å';                
            };
            embed = new EmbedBuilder()
                .setTitle(`${title}`)
                .setDescription(`${description}`)
                .setColor('#f80c0c')
                .setThumbnail(client.user.displayAvatarURL())
                .setTimestamp(Date.now());

            await interaction.editReply({
                embeds: [embed],
            });
            
        }          
    }
};